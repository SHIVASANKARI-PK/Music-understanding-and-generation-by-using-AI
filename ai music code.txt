"""
Melody Generator using LSTM
Author: ChatGPT
Description: This script trains an LSTM on MIDI files to generate new music
"""

import numpy as np
import glob
import pickle
from music21 import converter, instrument, note, chord, stream
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dropout, Dense, Activation
from tensorflow.keras.utils import to_categorical
import os

# -----------------------------
# STEP 1: Load MIDI files
# -----------------------------

def get_notes(midi_dir='midi_songs/'):
    notes = []
    for file in glob.glob(midi_dir + "*.mid"):
        print(f"Parsing {file}")
        midi = converter.parse(file)
        parts = instrument.partitionByInstrument(midi)
        elements = parts.parts[0].recurse() if parts else midi.flat.notes

        for element in elements:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))
    return notes

# -----------------------------
# STEP 2: Prepare Sequences
# -----------------------------

def prepare_sequences(notes, sequence_length=100):
    pitchnames = sorted(set(notes))
    note_to_int = {note: num for num, note in enumerate(pitchnames)}
    
    network_input = []
    network_output = []

    for i in range(len(notes) - sequence_length):
        seq_in = notes[i:i + sequence_length]
        seq_out = notes[i + sequence_length]
        network_input.append([note_to_int[n] for n in seq_in])
        network_output.append(note_to_int[seq_out])

    n_patterns = len(network_input)
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1)) / float(len(pitchnames))
    network_output = to_categorical(network_output)
    
    return network_input, network_output, pitchnames

# -----------------------------
# STEP 3: Build Model
# -----------------------------

def create_network(input_shape, n_vocab):
    model = Sequential([
        LSTM(512, input_shape=input_shape, return_sequences=True),
        Dropout(0.3),
        LSTM(512),
        Dense(256),
        Dropout(0.3),
        Dense(n_vocab),
        Activation('softmax')
    ])
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')
    return model

# -----------------------------
# STEP 4: Generate Notes
# -----------------------------

def generate_notes(model, network_input, pitchnames, num_generate=100):
    int_to_note = {num: note for num, note in enumerate(pitchnames)}
    pattern = network_input[np.random.randint(0, len(network_input)-1)]
    prediction_output = []

    for note_index in range(num_generate):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction = model.predict(prediction_input, verbose=0)
        index = np.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)
        pattern = np.append(pattern, [[index]], axis=1)
        pattern = pattern[:, 1:]

    return prediction_output

# -----------------------------
# STEP 5: Convert to MIDI
# -----------------------------

def create_midi(prediction_output, output_file='output.mid'):
    offset = 0
    output_notes = []

    for pattern in prediction_output:
        if '.' in pattern:
            notes_in_chord = pattern.split('.')
            chord_notes = [note.Note(int(n)) for n in notes_in_chord]
            new_chord = chord.Chord(chord_notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            output_notes.append(new_note)
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp=output_file)
    print(f"✅ MIDI file saved as {output_file}")

# -----------------------------
# MAIN FUNCTION
# -----------------------------

def main():
    if not os.path.exists("midi_songs"):
        print("❌ Please create a folder called 'midi_songs' and add some .mid files.")
        return

    notes = get_notes()
    with open('notes.pkl', 'wb') as f:
        pickle.dump(notes, f)

    network_input, network_output, pitchnames = prepare_sequences(notes)
    model = create_network((network_input.shape[1], network_input.shape[2]), len(pitchnames))

    # For demonstration purposes, we'll skip model.fit()
    # Uncomment below to train:
    # model.fit(network_input, network_output, epochs=50, batch_size=64)

    # Instead, load a pre-trained model (if available)
    # model.load_weights('model_weights.hdf5')

    prediction_output = generate_notes(model, network_input, pitchnames)
    create_midi(prediction_output)

if __name__ == "__main__":
    main()
